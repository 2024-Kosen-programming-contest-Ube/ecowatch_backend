name: Build for Raspberry Pi 3
on:
  push:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: sqlite:./db/database.db

    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            artifact_name: ecowatch_backend
            asset_name: ecowatch_backend-x86_64-unknown-linux-gnu
          - target: x86_64-unknown-linux-musl
            artifact_name: ecowatch_backend
            asset_name: ecowatch_backend-x86_64-unknown-linux-musl
          - target: x86_64-pc-windows-gnu
            artifact_name: ecowatch_backend.exe
            asset_name: ecowatch_backend-x86_64-pc-windows-gnu
          - target: aarch64-unknown-linux-gnu
            artifact_name: ecowatch_backend
            asset_name: ecowatch_backend-aarch64-unknown-linux-gnu

    steps:
      - uses: actions/checkout@v4

      - name: Setup rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install sqlx-cli
        uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: sqlx-cli

      - name: Setup database
        run: |
          sqlx database create
          sqlx migrate run --source ./db/migrations
          cargo sqlx prepare

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Pack artifact files
        run: |
          mkdir ./artifact
          mkdir ./artifact/db
          cp ${{ github.workspace }}/target/${{ matrix.target }}/release/${{ matrix.artifact_name }} ./artifact/
          cp -r ${{ github.workspace }}/db/migrations ./artifact/db/
          cp ${{ github.workspace }}/example.env ./artifact/
          cd ./artifact/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ github.workspace }}/artifact/*

  check_version:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{steps.check_version.outputs.changed}}
      version: ${{steps.check_version.outputs.version}}
    steps:
      - uses: actions/checkout@v4
      - name: Check version changed
        id: check_version
        uses: radumarias/action-check-version-changed-rust@v1

  release:
    runs-on: ubuntu-latest
    needs: [build, check_version]
    if: needs.check_version.outputs.version_changed == 'true'

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Zip artifacts
        run: |
          cd ./artifacts
          zip -r ecowatch_backend-aarch64-unknown-linux-gnu.zip ecowatch_backend-aarch64-unknown-linux-gnu/*
          zip -r ecowatch_backend-x86_64-pc-windows-gnu.zip ecowatch_backend-x86_64-pc-windows-gnu/*
          zip -r ecowatch_backend-x86_64-unknown-linux-gnu.zip ecowatch_backend-x86_64-unknown-linux-gnu/*
          zip -r ecowatch_backend-x86_64-unknown-linux-musl.zip ecowatch_backend-x86_64-unknown-linux-musl/*

      - name: Create tag
        id: create_tag
        uses: mathieudutour/github-tag-action@v6.2
        with:
          custom_tag: ${{ needs.check_version.outputs.version }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.create_tag.outputs.new_tag }}
          name: Release ${{ steps.create_tag.outputs.new_tag }}
          body: ${{ steps.create_tag.outputs.changelog }}
          artifacts:
            "./artifacts/ecowatch_backend-aarch64-unknown-linux-gnu.zip,
            ./artifacts/ecowatch_backend-x86_64-pc-windows-gnu.zip,
            ./artifacts/ecowatch_backend-x86_64-unknown-linux-gnu.zip,
            ./artifacts/ecowatch_backend-x86_64-unknown-linux-musl.zip"
          makeLatest: "latest"
